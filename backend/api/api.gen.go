// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ProblemSolution defines model for ProblemSolution.
type ProblemSolution struct {
	IsCorrect bool     `json:"isCorrect"`
	Solution  []string `json:"solution"`
	TaskId    TaskId   `json:"taskId"`
}

// TaskId defines model for TaskId.
type TaskId = string

// GetSolutionsParams defines parameters for GetSolutions.
type GetSolutionsParams struct {
	// TaskIDs Filter by task IDs
	TaskIDs []string `form:"taskIDs" json:"taskIDs"`
}

// PostSolutionsJSONBody defines parameters for PostSolutions.
type PostSolutionsJSONBody = []ProblemSolution

// PostSolutionsJSONRequestBody defines body for PostSolutions for application/json ContentType.
type PostSolutionsJSONRequestBody = PostSolutionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get solutions for tasks
	// (GET /solutions)
	GetSolutions(c *gin.Context, params GetSolutionsParams)
	// Submit a solution
	// (POST /solutions)
	PostSolutions(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetSolutions operation middleware
func (siw *ServerInterfaceWrapper) GetSolutions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSolutionsParams

	// ------------- Required query parameter "taskIDs" -------------

	if paramValue := c.Query("taskIDs"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument taskIDs is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "taskIDs", c.Request.URL.Query(), &params.TaskIDs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskIDs: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSolutions(c, params)
}

// PostSolutions operation middleware
func (siw *ServerInterfaceWrapper) PostSolutions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSolutions(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/solutions", wrapper.GetSolutions)
	router.POST(options.BaseURL+"/solutions", wrapper.PostSolutions)
}

type GetSolutionsRequestObject struct {
	Params GetSolutionsParams
}

type GetSolutionsResponseObject interface {
	VisitGetSolutionsResponse(w http.ResponseWriter) error
}

type GetSolutions200JSONResponse []ProblemSolution

func (response GetSolutions200JSONResponse) VisitGetSolutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSolutionsRequestObject struct {
	Body *PostSolutionsJSONRequestBody
}

type PostSolutionsResponseObject interface {
	VisitPostSolutionsResponse(w http.ResponseWriter) error
}

type PostSolutions200Response struct {
}

func (response PostSolutions200Response) VisitPostSolutionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get solutions for tasks
	// (GET /solutions)
	GetSolutions(ctx context.Context, request GetSolutionsRequestObject) (GetSolutionsResponseObject, error)
	// Submit a solution
	// (POST /solutions)
	PostSolutions(ctx context.Context, request PostSolutionsRequestObject) (PostSolutionsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSolutions operation middleware
func (sh *strictHandler) GetSolutions(ctx *gin.Context, params GetSolutionsParams) {
	var request GetSolutionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSolutions(ctx, request.(GetSolutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSolutions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSolutionsResponseObject); ok {
		if err := validResponse.VisitGetSolutionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSolutions operation middleware
func (sh *strictHandler) PostSolutions(ctx *gin.Context) {
	var request PostSolutionsRequestObject

	var body PostSolutionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSolutions(ctx, request.(PostSolutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSolutions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSolutionsResponseObject); ok {
		if err := validResponse.VisitPostSolutionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
